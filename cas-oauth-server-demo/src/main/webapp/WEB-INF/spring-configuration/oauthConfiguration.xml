<?xml version="1.0" encoding="UTF-8"?>
<!-- Licensed to Jasig under one or more contributor license agreements. 
	See the NOTICE file distributed with this work for additional information 
	regarding copyright ownership. Jasig licenses this file to you under the 
	Apache License, Version 2.0 (the "License"); you may not use this file except 
	in compliance with the License. You may obtain a copy of the License at the 
	following location: http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
	xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:c="http://www.springframework.org/schema/c"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">
	<description>
		This is the OAuth configuration XML file. It specifies the beans used by
		this package in conjunction with spring-security-oauth
	</description>

	<!-- This is incredibly frustrating. The token endpoint assumes that if 
		you're authenticated through HTTP basic that automatically you're using the 
		client_id/client_secret as the credentials. What I was hoping for is that 
		by authenticating anonymously that it would then look for the client_id in 
		the request, but so far it hasn't really done that. -->

	<!-- According to spring documentation, getPrincipal() will return null 
		if the user is authenticated anonymously. So I guess the token endpoint filter 
		needs to populate the principal -->
		
    
    <!-- There are 2 authentications that need to be handled:
        1.) Client Authentication: This is done by the clientAuthenticationManager
        2.) User Authentication: done by the testingAuthenticationManager
        
        The client authentication happens in the token endpoint, while the user 
        authentication happens in the authorization endpoint -->
    
    <!-- token endpoint is anonymous, but can be http basic for password grant type -->
    <sec:http authentication-manager-ref="clientAuthenticationManager"
        pattern="/oauth2.0/accessToken*">
        <sec:custom-filter ref="clientCredentialsTokenEndpointFilter"
            before="PRE_AUTH_FILTER" />
        <sec:http-basic/>
        <sec:anonymous/>
    </sec:http>
    
    <!-- authorization endpoint must be authenticated with the resource owner -->
    <sec:http authentication-manager-ref="testingAuthenticationManager"
        pattern="/oauth2.0/**">
        <sec:intercept-url pattern='/**'
            access="ROLE_CAS_USER" />
        <sec:custom-filter ref="oauth2ProviderFilter"
            before="PRE_AUTH_FILTER" />
        <sec:http-basic/>
    </sec:http>
    
    <bean id="clientDetailsUserService"
        class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService"
        c:clientDetailsService-ref="clientDetailsService" />
        
    <sec:authentication-manager id="testingAuthenticationManager">
        <sec:authentication-provider ref="casServerAuthenticationProvider" />
    </sec:authentication-manager>
    
    <sec:authentication-manager id="clientAuthenticationManager">
        <sec:authentication-provider user-service-ref="clientDetailsUserService" />
    </sec:authentication-manager>

    <!-- This is needed for the automatic framework endpoint discovery -->
    <mvc:annotation-driven /> 
        
    <bean id="clientCredentialsTokenEndpointFilter"
        class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter"
        c:path="/oauth2.0/accessToken" 
        p:authenticationManager-ref="clientAuthenticationManager"/>
	
	<bean id="casServerAuthenticationProvider"
	   class="org.jasig.cas.support.spring.CasServerAuthenticationProvider" 
	   c:casAuthenticationManager-ref="authenticationManager" />

    <!-- Same thing for the token services -->
    <bean id="tokenServices"
        class="org.springframework.security.oauth2.provider.token.DefaultTokenServices"
        p:token-store-ref="tokenStore"
        p:supportRefreshToken="true" />

    <!-- Same thing for the token store, except we want invent our own tokens 
        to match TGT and Service IDs -->
    <!-- If the token store is in a DataSource from jdbc-support, access may 
        not be synchronized. Handle this case eventually -->
    <bean id="tokenStore"
        class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore" />

	<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"
	    p:alwaysUseFullPath="true">
		<property name="urlMap"><map>
	        <entry key="/oauth2.0/confirm_access">
		       <bean class="org.springframework.web.servlet.mvc.ParameterizableViewController"
			       p:viewName="oauthConfirmView" />
	        </entry>
<!-- 	        <entry key="/oauth2.0/error"> -->
<!-- 	           TODO -->
<!-- 	           <null/> -->
<!-- 	        </entry> -->
		</map></property>
	</bean>
	
	
	<!-- NOTE the default mappings will NOT work here because the whitelabel approval endpoint does not include the servlet path -->

    <!-- the /oauth2.0 endpoint is already mapped in web.xml, so we just need 
        to map the endpoint urls -->
    <!-- TODO move the configuration to a properties file -->
    <oauth2:authorization-server
        client-details-service-ref="clientDetailsService" token-services-ref="tokenServices"
        authorization-endpoint-url="/authorize" token-endpoint-url="/accessToken"
        user-approval-page="forward:confirm_access"
        error-page="forward:error">
        <oauth2:authorization-code />
        <oauth2:refresh-token/>
        <oauth2:password 
            authentication-manager-ref="testingAuthenticationManager" />
    </oauth2:authorization-server>
    
    <oauth2:client-details-service id="clientDetailsService">
        <oauth2:client client-id="oauth2-client" secret="oauth2-secret"
            authorized-grant-types="authorization_code,password,refresh_token" />
    </oauth2:client-details-service>
    
    <oauth2:resource-server
        id="oauth2ProviderFilter"
        token-services-ref="tokenServices"/>

</beans>