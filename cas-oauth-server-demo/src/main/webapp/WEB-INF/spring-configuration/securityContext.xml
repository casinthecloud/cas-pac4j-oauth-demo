<?xml version="1.0" encoding="UTF-8"?>
<!-- Licensed to Jasig under one or more contributor license agreements. 
	See the NOTICE file distributed with this work for additional information 
	regarding copyright ownership. Jasig licenses this file to you under the 
	Apache License, Version 2.0 (the "License"); you may not use this file except 
	in compliance with the License. You may obtain a copy of the License at the 
	following location: http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<description>
		Security configuration for sensitive areas of CAS : status and statistics.
	</description>

	<sec:authentication-manager />

	<sec:http pattern="/status/**" entry-point-ref="notAuthorizedEntryPoint"
		use-expressions="true" auto-config="true">
		<sec:intercept-url pattern="/status"
			access="hasIpAddress('${cas.securityContext.status.allowedSubnet}')" />
	</sec:http>

	<sec:http pattern="/statistics/**" entry-point-ref="notAuthorizedEntryPoint"
		use-expressions="true" auto-config="true">
		<sec:intercept-url pattern="/statistics"
			access="hasIpAddress('${cas.securityContext.status.allowedSubnet}')" />
	</sec:http>

	<bean id="notAuthorizedEntryPoint"
		class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint" />
		
	
	<!-- OAUTH2 Stuff -->
    <!-- Since the client must be authorized, add security to the authorization 
        endpoint and token endpoint -->
    <sec:http authentication-manager-ref="testingAuthenticationManager"
       pattern="/oauth2.0/**">
        <sec:http-basic/>
        <sec:intercept-url pattern='/**'
            access="ROLE_USER" />
        <sec:custom-filter ref="oauth2ProviderFilter"
            before="PRE_AUTH_FILTER" />
    </sec:http>
    
    <sec:authentication-manager id="testingAuthenticationManager">
        <sec:authentication-provider>
            <sec:user-service>
       <sec:user name="jmccall@alphapd.gov" password="test" authorities="ROLE_USER"/>
            </sec:user-service>
        </sec:authentication-provider>
    </sec:authentication-manager>

    <mvc:annotation-driven />

    <!-- Same thing for the token services -->
    <bean id="tokenServices"
        class="org.springframework.security.oauth2.provider.token.DefaultTokenServices"
        p:token-store-ref="tokenStore" />

    <!-- Same thing for the token store, except we want invent our own tokens 
        to match TGT and Service IDs -->
    <!-- If the token store is in a DataSource from jdbc-support, access may 
        not be synchronized. Handle this case eventually -->
    <bean id="tokenStore"
        class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore" />

    <!-- TODO:
        cas user approval redirects to oauth/authorize and not what oauth2.0/authorize
        why does this configuration need to be here? why not oauthConfiguration.xml? -->
        
    <!-- This is just for testing out endpoints. Eventually we want to make this work in spring 1.x style -->
    <context:component-scan base-package="org.jasig.cas.support.oauth.endpoint" />

    <!-- the /oauth2.0 endpoint is already mapped in web.xml, so we just need 
        to map the endpoint urls -->
    <oauth2:authorization-server
        client-details-service-ref="clientDetailsService" token-services-ref="tokenServices"
        authorization-endpoint-url="/authorize" token-endpoint-url="/accessToken"
        user-approval-page="forward:confirm_access"
        error-page="forward:error">
        <!-- Enables the authorization code grant type -->
        <!-- <oauth2:authorization-code -->
        <!-- authorization-code-services-ref="customizedAuthorizationCodeServices" -->
        <!-- /> -->
        <!-- You can customize the user-approval-page and the approval-parameter-name 
            here to match the cas login page -->
        <oauth2:authorization-code disabled="false" />
<!--         <oauth2:client-credentials/> -->
        <oauth2:password 
            authentication-manager-ref="testingAuthenticationManager" />
    </oauth2:authorization-server>
    
    <oauth2:client-details-service id="clientDetailsService">
        <oauth2:client client-id="oauth2-client" secret="oauth2-secret"
            authorized-grant-types="authorization_code" authorities="request_tokens" />
        <oauth2:client client-id="jmccall@alphapd.gov" secret="test"
            authorized-grant-types="authorization_code,password" />
    </oauth2:client-details-service>
    
    <oauth2:resource-server
        id="oauth2ProviderFilter"
        token-services-ref="tokenServices"/>
</beans>
